# This workflow will build a docker image, push it to ghcr.io.  It returns the docker image name and tag.
name: Build docker image for Azure app

on:
  workflow_call:
    secrets: 
      DEPLOY_TOKEN:
        description: 'Token that is used to determine if the deployment is allowed - Defined in org action secrets'
        required: true
      PRODUCTION_DEPLOYERS:
        description: 'Name of the team that defines who can deploy to production - Defined in org action secrets'
        required: true
      DOCKERHUB_TOKEN: 
        description: 'Token to be used if publishing image to dockerhub, input.docker-hub-username must also be provided'
        required: false


    inputs:
      deploy-env:
        description: 'environment to deploy (i.e. dev | prod) - used as a label for the Docker image'
        required: true
        type: string
      application-type:
        description: 'application type (i.e. api | worker | ui) - used as a label for the Docker image'
        required: true
        type: string
      application-version:
        description: 'the tag to use for the image (e.g. prod: v1.2.0, dev: v1.2.0+dev:1D3F567890)'
        required: true
        type: string
      build-args:
        description: 'optionally pass in build args to the Docker build command (e.g. "MY_VAR=my_value")'
        required: false
        type: string
      docker-hub-username:
        description: 'optionally pass to publish image to docker-hub'
        required: false
        type: string
      
    outputs:
      docker-image-name-with-tag: 
        value: ${{ jobs.determine-image-name.outputs.docker-image-name-with-tag }}

jobs:
  check-deployable:
    uses: ./.github/workflows/app-is-deployable.yml
    with:
      deploy-env: ${{ inputs.deploy-env }}
    secrets:
      DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      PRODUCTION_DEPLOYERS: ${{ secrets.PRODUCTION_DEPLOYERS }}

  determine-image-name:
    name: Determine Image Name
    runs-on: ubuntu-latest
    outputs:
      gchr-docker-image-name-with-tag: "${{ env.GCHR_DOCKER_IMAGE_NAME_WITH_TAG }}"
      dockerhub-image-name-with-tag: "${{ env.DOCKERHUB_IMAGE_NAME_WITH_TAG }}"
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4.1.1
        with:
          repository: 'clearlydefined/operations'
          ref: '3adf6fb9656eee09cd8afbd6cffbff5da29a30d6'
          path: 'operations'
      - name: Determine gchr Image Name
        id: determine_gchr_image_name
        run: |
          echo "BUILD_ARGS=${{ inputs.build-args }}"
          script_log=$(./operations/scripts/app-workflows/determine-image-name.sh \
            "ghcr.io" \
            "${{ github.repository }}" \
            "${{ inputs.deploy-env }}" \
            "${{ inputs.application-version }}") || (echo "$script_log" && exit 1)
          echo -e "---- script log\n$script_log\n----"; \
          image_name=$(echo "$script_log" | tail -n 1)
          echo "GCHR_DOCKER_IMAGE_NAME_WITH_TAG=$image_name" >> $GITHUB_ENV

      - name: Determine Dockerhub Image Name
        if: ${{ inputs.docker-hub-username != '' }}
        id: determine_dockerhub_name
        run: |
          echo "BUILD_ARGS=${{ inputs.build-args }}"
          script_log=$(./operations/scripts/app-workflows/determine-image-name.sh \
            "${{ inputs.docker-hub-username }}" \
            "${{ github.repository }}" \
            "${{ inputs.deploy-env }}" \
            "${{ inputs.application-version }}") || (echo "$script_log" && exit 1)
          echo -e "---- script log\n$script_log\n----"; \
          image_name=$(echo "$script_log" | tail -n 1)
          echo "DOCKERHUB_IMAGE_NAME_WITH_TAG=$image_name" >> $GITHUB_ENV

  # determine-dockerhub-image-name:
  #   name: Determine Image Name
  #   runs-on: ubuntu-latest
  #   outputs:
  #     docker-image-name-with-tag: "${{ env.DOCKER_IMAGE_NAME_WITH_TAG }}"
  #   steps:
  #     - name: Checkout this repo
  #       if: ${{ inputs.docker-hub-username != '' }}
  #       uses: actions/checkout@v4.1.1
  #       with:
  #         repository: 'clearlydefined/operations'
  #         ref: '3b4ec17688a881e77b35c16f3f758fc2705a1e8d'
  #         path: 'operations'
  #     - name: Determine Docker Image Name
  #       if: ${{ inputs.docker-hub-username != '' }}
  #       id: determine_image_name
  #       run: |
  #         echo "BUILD_ARGS=${{ inputs.build-args }}"
  #         script_log=$(./operations/scripts/app-workflows/determine-image-name.sh \
  #           "${{ inputs.docker-hub-username }}" \
  #           "${{ github.repository }}" \
  #           "${{ inputs.deploy-env }}" \
  #           "${{ inputs.application-version }}") || (echo "$script_log" && exit 1)
  #         echo -e "---- script log\n$script_log\n----"; \
  #         image_name=$(echo "$script_log" | tail -n 1)
  #         echo "DOCKER_IMAGE_NAME_WITH_TAG=$image_name" >> $GITHUB_ENV

  build-docker-image:
    name: Build Image
    runs-on: ubuntu-latest
    needs: [check-deployable, determine-image-name]
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Log into Docker Hub
        if: ${{ inputs.docker-hub-username != '' }}
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ inputs.docker-hub-username }} 
          password: ${{ secrets.DOCKERHUB_TOKEN }} 

      - name: Log into ghcr registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # user that kicked off the action
          password: ${{ secrets.GITHUB_TOKEN }} # token created when the action launched (short lived)

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.2.0
        with:
          context: .
          push: true
          file: Dockerfile
          build-args: |
            APP_VERSION=${{ inputs.application-version }}
            BUILD_SHA=${{ github.sha }}
            ${{ inputs.build-args }}
          tags: |
            ${{ needs.determine-image-name.outputs.gchr-docker-image-name-with-tag }}
            ${{ needs.determine-image-name.outputs.dockerhub-image-name-with-tag }}
          labels: |
            env=${{ inputs.deploy-env }}
            type=${{ inputs.application-type }}          
